import React, { useState, useEffect } from "react";
import { useParams } from "react-router-dom";
import axios from "axios";
import "bootstrap/dist/css/bootstrap.min.css";

const MarkAttendance = () => {
  const { pid } = useParams();
  const [students, setStudents] = useState([]);
  const [attendance, setAttendance] = useState({});
  const [selectedHours, setSelectedHours] = useState([]);

  useEffect(() => {
    const fetchStudents = async () => {
      try {
        const response = await axios.get(
          `http://localhost:4000/vendor/studentsRegistered/${pid}`
        );
        setStudents(response.data);

        // Initialize attendance with stored values or default to "present"
        const initialAttendance = response.data.reduce((acc, student) => {
          acc[student.rollno] = student.attendanceStatus || "present";
          return acc;
        }, {});
        setAttendance(initialAttendance);
      } catch (error) {
        console.error("Error fetching students:", error);
      }
    };
    fetchStudents();
  }, [pid]);

  const toggleAttendance = (rollno) => {
    setAttendance((prev) => ({
      ...prev,
      [rollno]: prev[rollno] === "present" ? "absent" : "present",
    }));
  };

  const markAll = (status) => {
    const updatedAttendance = Object.keys(attendance).reduce((acc, rollno) => {
      acc[rollno] = status;
      return acc;
    }, {});
    setAttendance(updatedAttendance);
  };

  const handleSubmit = async () => {
    try {
      console.log(pid, selectedHours, attendance);
      await axios.post("http://localhost:4000/vendor/markAttendance", {
        pid,
        selectedHours,
        attendance,
      });
      alert("Attendance submitted successfully!");
    } catch (error) {
      console.error("Error submitting attendance:", error);
    }
  };

  const handleHourSelection = (hour) => {
    setSelectedHours((prev) =>
      prev.includes(hour) ? prev.filter((h) => h !== hour) : [...prev, hour]
    );
  };

  return (
    <div className="container d-flex flex-column align-items-center justify-content-center vh-100">
      <h2 className="mb-4">Mark Attendance</h2>

      {/* Select Class Hours */}
      <div className="mb-3 text-center">
        <label className="form-label">Select Class Hours:</label>
        <div className="d-flex flex-wrap justify-content-center">
          {[1, 2, 3, 4, 5, 6].map((hour) => (
            <button
              key={hour}
              className={`btn me-2 mb-2 ${
                selectedHours.includes(hour) ? "btn-primary" : "btn-outline-primary"
              }`}
              onClick={() => handleHourSelection(hour)}
            >
              {hour}
            </button>
          ))}
        </div>
      </div>

      {/* Student Attendance */}
      <div className="d-flex flex-wrap justify-content-center gap-3">
        {students.map((student) => (
          <div
            key={student.rollno}
            className={`d-flex align-items-center justify-content-center rounded-circle border border-dark ${
              attendance[student.rollno] === "present" ? "bg-success" : "bg-danger"
            }`}
            style={{
              width: "60px",
              height: "60px",
              cursor: "pointer",
              fontWeight: "bold",
              color: "white",
              fontSize: "20px",
              textAlign: "center",
            }}
            onClick={() => toggleAttendance(student.rollno)}
          >
            {student.rollno.slice(-3)}
          </div>
        ))}
      </div>

      {/* Action Buttons */}
      <div className="mt-4">
        <button className="btn btn-success me-2" onClick={() => markAll("present")}>
          Mark All Present
        </button>
        <button className="btn btn-danger" onClick={() => markAll("absent")}>
          Mark All Absent
        </button>
      </div>

      {/* Attendance Count */}
      <div className="mt-3 text-center">
        <h5>
          <span className="text-success">
            ✔ {Object.values(attendance).filter((status) => status === "present").length}
          </span>
          &nbsp;Present |&nbsp;
          <span className="text-danger">
            ✘ {Object.values(attendance).filter((status) => status === "absent").length}
          </span>
          &nbsp;Absent
        </h5>
      </div>

      {/* Submit Button */}
      <button className="btn btn-primary mt-3" onClick={handleSubmit}>
        Submit
      </button>
    </div>
  );
};


export default MarkAttendance;
